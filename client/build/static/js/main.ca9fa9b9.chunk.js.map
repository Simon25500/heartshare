{"version":3,"sources":["serviceWorker.js","components/home.jsx","index.js","assets/images/logo_home.svg"],"names":["Boolean","window","location","hostname","match","Home","className","src","logo_home","alt","height","width","for","id","type","placeholder","href","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"iKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sDCwBSC,E,uKArCP,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,+BACX,yBAAKC,IAAKC,IAAWC,IAAI,kBAAkBC,OAAO,MAAMC,MAAM,QAC9D,yBAAKL,UAAU,0DACX,uBAAGA,UAAU,kCAAb,aACA,yBAAKA,UAAU,2BACX,0BAAMA,UAAU,wBACZ,yBAAKA,UAAU,QACf,2BAAOA,UAAU,gCAAgCM,IAAI,YAArD,YAGA,2BAAON,UAAU,6HAA6HO,GAAG,WAAWC,KAAK,OAAOC,YAAY,cAEpL,yBAAKT,UAAU,QACf,2BAAOA,UAAU,gCAAgCM,IAAI,YAArD,YAGA,2BAAON,UAAU,iJAAiJO,GAAG,WAAWC,KAAK,WAAWC,YAAY,wBAE5M,yBAAKT,UAAU,qCACf,4BAAQA,UAAU,6GAA6GQ,KAAK,UAApI,WAGA,uBAAGR,UAAU,8EAA8EU,KAAK,KAAhG,8B,GA1BbC,aCMnBC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SFwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBGzI5BC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.ca9fa9b9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport logo_home from '../assets/images/logo_home.svg'\n\nclass Home extends Component {\n    render() {\n        return (\n            <div className='home h-screen' >\n                <div className=\" flex items-center flex-col\">\n                    <img src={logo_home} alt=\"logo HeartShare\" height='400' width='400'/>\n                    <div className='mt-20 p-5 bg-red-600 w-1/2 max-w-screen-md rounded-lg '>\n                        <p className=\"text-xl font-bold  text-center\">connexion</p>\n                        <div className=\" w-3/4 max-w-lg mx-auto\">\n                            <form className=\" px-8 pt-6 pb-8 mb-4\">\n                                <div className=\"mb-4\">\n                                <label className=\"block  text-sm font-bold mb-2\" for=\"username\">\n                                    Username\n                                </label>\n                                <input className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\" id=\"username\" type=\"text\" placeholder=\"Username\" />\n                                </div>\n                                <div className=\"mb-6\">\n                                <label className=\"block  text-sm font-bold mb-2\" for=\"password\">\n                                    Password\n                                </label>\n                                <input className=\"shadow appearance-none border border-red-500 rounded w-full py-2 px-3 text-gray-900 mb-3 leading-tight focus:outline-none focus:shadow-outline\" id=\"password\" type=\"password\" placeholder=\"******************\" />\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                <button className=\"bg-white hover:bg-red-200 text-red-600 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\" type=\"button\">\n                                    Sign In\n                                </button>\n                                <a className=\"inline-block align-baseline font-bold text-sm text-white hover:text-red-200\" href=\"/\">\n                                    Forgot Password?\n                                </a>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/stylesheets/application.scss';\n\n//import component\nimport Home from './components/home'\n\n\nReactDOM.render(\n    <Home />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo_home.ffb43085.svg\";"],"sourceRoot":""}